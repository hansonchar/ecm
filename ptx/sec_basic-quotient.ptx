<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_basic-quotient">
  <title>Counting under Equivalence</title>

<introduction>
  <!-- Here we will discuss the relationship between combinations and permutations from an advanced mathematical perspective: we are counting equivalence classes.  We will then consider some other examples of this and some non-examples (why you cannot always do this). -->

<p>
  So far we have been able to solve our counting problems simply by use of the sum and product principles, together with the fact that the number of <m>k</m>-element subsets of an <m>n</m>-element set is <m>\binom{n}{k}</m> (the values of which can be found in Pascal's triangle). This means that we have always <em>built up</em> the set of outcomes by combining smaller sets of outcomes combined in various ways.
</p>

<p>
  It is often useful to go the other way.  We could purposely over count the number of outcomes, but in a way that we can recover the correct set.
</p>
</introduction>

<subsection xml:id="subsec-quotient">
  <title>The Quotient Principle</title>

  <p>
    In <xref ref="act-binomformula"/>, you showed proved the algebraic formula <m>\binom{n}{k} = \frac{n!}{(n-k)!k!}</m>.  However, this was done rather indirectly.  First you proved the binomial identity <m>P(n,k) = \binom{n}{k}k!</m> and then wrote <m>P(n,k) = \frac{n!}{(n-k)!}</m> and solved for <m>\binom{n}{k}</m>.
  </p>

  <p>
    This approach has the advantage of illustrating the connection between combinations and permutations, but the combinatorial argument that both sides of the identity are equal asked you to count the number of <em>permutations</em> in two ways.  It is instructive to think of this equation in terms of <em>combinations</em> instead.  Let's start with a concrete example.
  </p>

  <activity>
    <introduction>
      <p>
        Let's count the number of subsets of <m>\{a,b,c,d,e\}</m> of size 3.  Of course we already know the answer should be <m>\binom{5}{3}</m>, which we can see in Pascal's triangle is equal to 10.  What might you try if you didn't already know this?
      </p>
    </introduction>
    <task>
      <statement>
        <p>
          You might first guess that the answer is <m>5\cdot 4 \cdot 3</m> since there are 5 choices for which element you put in your subset first, then  4 choices for the next element, and 3 choices for the last element.  Write down all 60 of the outcomes you get by counting the <q>subsets</q> this way.<fn>This might seem like a lot of busy work, but your efforts will be rewarded.</fn>
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          One of the subsets we are actually interested in is <m>\{a,c,d\}</m>.  How many of the outcomes you listed above correspond to this set?  How many outcomes correspond to the set <m>\{c,d,e\}</m>?
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Explain why every subset corresponds to the same number of permutations.  Then use this to count the total number of subsets correctly.
        </p>
      </statement>
    </task>
  </activity>

  <p>
    Let's look carefully at what we did above.  We had a set of permutations (all 60 of the 3-permutations of the set <m>\{a,b,c,d,e\}</m>).  Then we noticed that some of these permutations corresponded the the same subset.  Saying that these permutations were related like this feels like defininig a equivalence relation.
  </p>

  <activity>
    <introduction>
      <p>
        Refer back to your list of 60 3-permutations of <m>\{a,b,c,d,e\}</m>.
      </p>
    </introduction>
    <task>
      <statement>
        <p>
          Define an <term>equivalence relation</term> on the permutations you listed so that permutations that <q>correspond</q> to the same subset are equivalent.  That is, give a rule that specifies when two permutations are <q>equivalent</q>.
        </p>
      </statement>
      <hint>
        <p>
          One rule of this type would be, two permutations are equivalent if they start with the same letter.  This is not the one you want though.
        </p>
      </hint>
    </task>
    <task>
      <statement>
        <p>
          In any set <m>S</m>, if you have an equivalence relation <m>\sim</m>, you can <term>partition</term> <m>S</m> into <term>equivalence classes</term>: sets of elements that are equivalent under <m>\sim</m> (i.e., sets of the form <m>\{x \in S \st x \sim a\} </m> for a particular element <m>a</m>).
        </p>
        <p>
          Write out the equivalence classes generated by the equivalence relation you gave above.  Explain why these all have the same size.  How many equivalence classes do you have (and how does this relate to the fact that they all have the same size)?
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Find a bijection between the set of equivalence classes and the set of subsets of <m>\{a,b,c,d,e\}</m>.  Why is this important?
        </p>
      </statement>
      <hint>
        <p>
          You might think about the usual way you would write a subset.  Essentially what this question is asking is for you to pick a representative for each equivalence class.
        </p>
      </hint>
    </task>
  </activity>

  <p>
    This suggests a general approach to solving a counting problem.  Say we want to count the number of elements in a set <m>S</m>.  Suppose we can count the size of some set <m>T</m>, perhaps containing many more elements than we are actually interested in counting.  Then define an equivalence relation <m>\sim</m> on <m>T</m> so that there is a bijection between <m>S</m> and the set of equivalence classes <m>T/\sim</m>.  Then if we know the size of <m>T/\sim</m>, we have the size of <m>S</m>.
  </p>

  <p>
    Look at the notation <m>T/\sim</m> that we used to denote the set of equivalence classes of <m>T</m> under <m>\sim</m>.  This set is sometimes callet the <term>quotient set</term> or <term>quotient space</term> of <m>T</m> by <m>\sim</m>.  This is a good name, as you are dividing up a set into parts.  It is also a good name because sometimes we can conclude
    <me>
      |T/\sim| = |T|/|A|
    </me>
    where <m>A</m> is one of the equivalence classes under <m>\sim</m>.  When can you do this?
  </p>

  <p>
    Note this is exactly what we did when we counted subsets: we divided the number of permutations by the number of permutations equivalent to each other.  That worked precisely because <em>all the equivalence classes had the same size</em>!
  </p>

  <p>
    This justifies the <term>quotient principle</term> we now state.
  </p>

  <assemblage xml:id="assemblage-quotientprinciple">
    <title>The Quotient Principle</title>
    <p>
      If we partition a set of size <m>p</m> into <m>q</m> blocks, each of size <m>r</m>, then <m>q = p/r</m>.
    </p>
  </assemblage>

  <p>
    Like the product principle, the quotient principle is really just a statement about how division works.  Here are a few examples of how you can use it in counting.  In each of the following activities, make sure you can say exactly how the quotient principle could be used.
  </p>

  <activity xml:id="roundtable" category="essential">
    <statement>
      <p>
        In how many ways may <m>n</m> people sit around a round
        table? (Assume
        that when people are sitting around a round table, all that really matters is who is to each person's right. For example, if we can get one arrangement of people around the table from another by having everyone get up and move to the right one place and sit back down, we get an equivalent arrangement of people. Notice that you can get a list from a seating arrangement by marking a place at the table, and then listing the people at the table, starting at that place and moving around to the right.) There are at least two different ways of doing this problem. Try to find them both, especially the one that uses the quotient principle.
      </p>
    </statement>
    <hint>
        <p>
      The problem suggests that you think about how to get a list from a seating arrangement. Could every list of n distinct people come from a seating chart? How many lists of n distinct people are there? How many lists could we get from a given seating chart by taking different starting places?
        </p>
    </hint>
    <hint>
        <p>
            For a different way of doing the problem, suppose that you have chosen
      one person, say the first one in a list of the people in alphabetical order by
      name. Now seat that person. Does it matter where they sit? In ways can
      you seat the remaining people? Does it matter where the second person in
      alphabetical order sits?
        </p>
    </hint>
    <solution>
      <p>
        The total number of ways to list how the <m>n</m> people sit around the
        table is <m>n!</m>. However, two lists are the same if we get one from the other
        by shifting everyone right the same number of places. This divides the set
        of lists up into sets of <m>n</m> mutually equivalent lists. The number <m>m</m> of
        such sets is the number of seating arrangements. However by the product
        principle, <m>mn=n!</m>, because we have partitioned up the set of <m>n!</m> lists into
        <m>m</m> sets of size <m>n</m>. Therefore <m>m=(n-1)!</m> A second solution may be
        obtained by choosing one of the <m>n</m> people and letting this person sit
        anywhere. Since all that matters is who is to the right of each person, it
        doesn't matter where this person sits. Once this person is seated, let
        everybody else sit down. If they sit down first in one order clockwise around
        the table and then in some other order, the person to the right of somebody
        has changed. Thus there are
        <m>(n-1)!</m> ways (the number of ways to seat everybody else) to seat the people
        around the table.
      </p>
    </solution>
  </activity>

  <activity xml:id="necklace" category="essential and interesting">
    <statement>
      <p>
        In how many ways may we string <m>n</m> distinct beads on a necklace
        without a clasp? (Perhaps we make the necklace by stringing the beads
        on a string, and then carefully gluing the two ends of the string
        together so that the joint can't be seen. Assume someone can pick up the necklace,
        move it around in space and put it back down, giving an
        apparently different way of stringing the beads that is
        equivalent to the first.)
      </p>
    </statement>
    <hint>
        <p>
            How could we get a list of beads from a necklace?
        </p>
    </hint>
    <hint>
        <p>
      When we cut the necklace and string it out on a table, there are 2n lists of beads we could get. Why is it <m>2n</m> rather than <m>n</m>?
        </p>
    </hint>
    <solution>
      <p>
        We can obtain a permutation of the beads by cutting the necklace and
        stretching it out in a straight line. We can partition the permutations
        according to which necklace they come from in this process. Two permutations
        are in the same block if we get one either by circularly permuting the other
        or by reversing the other (this corresponds to flipping the necklace over in
        space). Thus each necklace corresponds to <m>2n</m> permutations so by the
        quotient principle we have <m>n!/2n=(n-1)!/2</m> ways to string <m>n</m> distinct beads
        on a necklace.
      </p>
    </solution>
  </activity>

  <activity xml:id="tennispairings2" category="interesting">
      <introduction>
          <p>
      We first gave this problem as <xref ref="tennispairings1a">Problem</xref>. Now we have several ways to approach the problem. A tennis club has <m>2n</m> members. We want to pair up the members by twos for singles matches.
          </p>
      </introduction>
    <task>
      <statement>
        <p>
          In how many ways may we pair up all the members of the club?
          Give at least two solutions different from the one you gave in   <xref ref="tennispairings1a">Problem</xref>.
          (You may not have done <xref ref="tennispairings1a">Problem</xref>. In that case, see if you can find three solutions.)
        </p>
      </statement>
      <hint>
          <p>
              You might first choose the pairs of people. You might also choose to make a list of all the people and then take them by twos from the list.
          </p>
      </hint>
      <solution>
          <p>
            Choose people in pairs. There are <m>\binom{2n}{2}</m> ways to choose one pair, <m>\binom{2n-2}{2}</m> ways to choose a second pair, and once <m>k</m> pairs have been chosen, there are <m>\binom{2n-2k}{2}</m> ways to choose the next pair.
            The number of <em>lists</em> of pairs we get in this way is <m>\prod_{i=0}^{n-1} \binom{2n-2i}{2}= \frac{(2n)!}{2^i}</m>.
            However each way of pairing people gets listed <m>n!</m> times since we see all possible length <m>n</m> lists of pairs.
            Therefore the number of actual pairings is <me>\frac{(2n)!}{2^n n!} = \frac{2n!}{2n\cdot2n-2\cdot2n-4\cdot \cdots\cdot 2} =  \prod_{i=0}^{n-1} 2n-2i-1.</me>
            Notice how this combinatorial solution gives the formula that we found algebraically in <xref ref="tennispairings1a">Problem</xref>, which then turns out to be algebraically equivalent to the formula we first saw in the solution to <xref ref="tennispairings1a">Problem</xref>.
          </p>

          <p>
            For yet another solution, we can list the <m>2n</m> members in <m>(2n)!</m> ways. Then
            we can take the first two as a tennis pair, the next two, and so on. There
            are <m>n!</m> ways that a given set of tennis pairings could be arranged, and
            each of the <m>n</m> pairs could appear in 2 ways, so the tennis pairings partition the set of all permutations of the <m>2n</m> members into blocks of size <m>n!2^n</m>. Thus we have <m>\frac{(2n)!}{n!2^n}</m> tennis pairings once again.
          </p>
      </solution>
    </task>

    <task>
        <statement>
        <p>
          Suppose that in addition to specifying who plays whom, for each
            pairing we say who serves first.  Now in how many ways may we
            specify our pairs? Try to find as many solutions as you can.
        </p>
      </statement>
     <hint>
         <p>You might first choose ordered pairs of people, and have the first person in each pair serve first. You might also choose to make a list of all the people and then take them by twos from the list in order.</p>
     </hint>
    <solution>
      <p>
        Choose people in ordered piars.  The first person in an ordered pair serves first.  There are <m>2n(2n-1)</m> ways to choose one pair, <m>(2n-2)(2n-3)</m> ways to choose a second pair, and once <m>k</m> pairs have been chosen, there are <m>(2n-2k)(2n-2k-1)</m> ways to choose the next pair.  The number of <em>lists</em> o pairs we get in this way is <m>\prod_{i=0}^{n-1} (2n-2i)(2n-2i-1) = (2n)!</m>.
        However, each way of pairing people gets listed <m>n!</m> times since we see all possible length <m>n</m> lists of pairs.  Therefore the number of actual pairings is <m>\frac{(2n)!}{n!} = (2n)^{\underline{n}}</m>.
      </p>

      <p>
        For yet another solution, we can list the <m>2n</m> members in <m>(2n)!</m> ways. Then we can take the first two as a tennis pair, with the first person serving first, the next two, and so on. There are <m>n!</m> ways that a given set of tennis pairings could be arranged, so the tennis pairings partition the set of all permutations of the <m>2n</m> members into blocks of size <m>n!</m>. Thus we have <m>\frac{(2n)!}{n!}</m> tennis pairings once again.
      </p>
    </solution>
  </task>
  </activity>

<!-- Activity 45 -->
  <activity xml:id="twocolorsofbeads" category="essential">
    <statement>
      <p>
        In how many ways may we attach two identical red beads
        and two identical blue beads to the corners of a square (with one bead
        per corner) free
        to move around in (three-dimensional) space?
      </p>
    </statement>
    <hint>
        <p>
            It might be helpful to just draw some pictures of the possible configurations. There aren't that many.
        </p>
    </hint>
    <solution>
      <p>
        Two ways; either the red beads are side-by-side or diagonally
        opposite. If we think about partitioning lists of 2 <m>R</m>s and 2 <m>B</m>s so that
        two are in the same block if we get one from the other by moving the square,
        we get two blocks, <m>\{RRBB, BRRB, BBRR, RBBR\}</m> and <m>\{RBRB, BRBR\}</m>.
      </p>
    </solution>
  </activity>

  <activity>
    <statement>
      <p>
        We have used the quotient principle to explain the formula <m>\binom{n}{k} = \frac{n!}{(n-k)!k!}</m> by thinking of this as <m>\binom{n}{k} = \frac{P(n,k)}{k!}</m>.  What if we don't involve <m>P(n,k)</m> at all?
      </p>

      <p>
        Describe a set of outcomes that has size <m>n!</m> that can be partitioned into blocks of size <m>(n-k)!k!</m> so that each block corresponds to something <m>\binom{n}{k}</m> counts.
      </p>
    </statement>
    <hint>
      <p>
        You might try the next problem first to get an idea.
      </p>
    </hint>
    <hint>
      <p>
        One thing that <m>\binom{n}{k}</m> counts is all bit stings of length <m>n</m> and weight <m>k</m>.  What if instead of bit strings, we wanted all strings made up out of some number of distinct symbols that come in two types?  How can you make this be counted by <m>n!</m>?
      </p>
    </hint>
  </activity>

  <activity>
    <statement>
      <p>
        How many anagrams of the word <q>anagram</q> are there? (An anagram is a rearrangement of <em>all</em> of the letters of a word.)
      </p>
    </statement>
    <hint>
      <p>
        A much easier question would be, how many anagrams of the word <q>anbgrcm</q>?  Then use the quotient principle.
      </p>
    </hint>
  </activity>

</subsection>

<subsection xml:id="subsec-ordermatters">
  <title>When does Order Matter?</title>

  <p>
    One way to distinguish combinations from permutations is by asking whether <q>order matters</q>.  Both <m>\binom{n}{k}</m> and <m>P(n,k)</m> count the number of ways to select <m>k</m> objects from <m>n</m> objects without repeats, but you use the combination <m>\binom{n}{k}</m> when <q>order doesn't matter</q> and the permutation <m>P(n,k)</m> when <q>order matters</q>.  Despite the presence of the scare quotes, this is not a false statement, but we must understand what we mean when we say <q>order matters</q>.
  </p>

  <activity>
    <introduction>
      <p>
        Each counting question below asks for two answers.  Decide which answer is a combination and which is a permutation, and why that makes sense.
      </p>
    </introduction>
    <task>
      <statement>
        <p>
          An ice-cream shop offers 31 flavors.  How many 3-scoop ice-cream cones are possible, assuming each scoop must be a different flavor?  How many 3-scoop milkshakes are possible, assuming each scoop must be a different flavor?
        </p>
      </statement>
      <hint>
        <p>
          This is not intended to be a trick question.  In fact, this example would be a good for thinking about how permutations and combinations are related in general.
        </p>
      </hint>
    </task>
    <task>
      <statement>
        <p>
          How many 5-digit numbers are there with distinct, non-zero digits for which the digits must be increasing?  How many are there for which the digits can come in any order?
        </p>
      </statement>
      <hint>
        <p>
          The point of this question is to push back against your conception of what <q>order matters</q> means.  Since you know the answers must be <m>\binom{9}{5}</m> or <m>P(9,5)</m>, you should be able to answer correctly by deciding which set is bigger.
        </p>
      </hint>
    </task>
    <task>
      <statement>
        <p>
          How many injective functions <m>f:[k] \to [n]</m> are there all   together?  How many injective functions <m>f:[k] \to [n]</m> are there that are (strictly) increasing?
        </p>
      </statement>
      <hint>
        <p>
          You might as well assume that <m>k \le n</m> (otherwise the answers would both be 0).  If you are stuck, write out some examples of each using two-line notation for the functions.  What decisions do you need to make?
        </p>
      </hint>
    </task>
  </activity>

  <activity>
    <statement>
      <p>
        The number of <m>n</m>-bit strings of weight <m>k</m> is <m>\binom{n}{k}</m>, so a combination.  But in determining one bit string from another, all that matters is the order in which the <m>k</m> 1's and <m>n-k</m> 0's appear.  So does order matter?  In what sense does it not?
      </p>
    </statement>
    <hint>
      <p>
        Think about what <m>P(n,k)</m> would count when building a bit string.  Why does it make sense to quotient out by <m>k!</m>?
      </p>
    </hint>
  </activity>

  <activity>
    <statement>
      <p>
        Write a clear sentence or two saying specifically what we mean when we say <q>order matters</q> to distinguish between combinations and permutations.
      </p>
    </statement>
    <hint>
      <p>
        They key here is to think about the set of outcomes that we are counting.  Ask yourself, the order of what?
      </p>
    </hint>
  </activity>

  <p>
    Understanding the role of order in distinguishing outcomes often suggests the use of the quotien principle.  You might say we arive at combinations by counting permutations and modding out by the order.  Each block that corresponds to a single combination is a group of permutations that are only different because of their order.  Let's see if we can apply this to other counting questions.
  </p>

  <activity>
    <introduction>
      The ice cream shop is down to only 3 flavors.  If you wanted a 3-scoop cone or a 3-scoop shake, made without repeated flavors, there would only be 6 cones possible and only 1 shake.  But what if you allowed repeated flavors?
    </introduction>
    <task>
      <statement>
        <p>
          How many 3-scoop cones are possible?
        </p>
      </statement>
      <hint>
        <p>
          You should be able to use the multiplicative principle and nothing else here.
        </p>
      </hint>
    </task>
    <task>
      <statement>
        <p>
          How many 3-scoop shakes are there?  Write all of them down.
        </p>
      </statement>
      <hint>
        <p>
          Maybe the flavors are chocolate, vanilla, and strawberry.  Some of the outcomes are <m>ccv</m> and <m>csv</m>, but notice that we would not also include <m>cvc</m> or <m>vcs</m> because in the blender, order doesn't matter.
        </p>
      </hint>
    </task>
    <task>
      <statement>
        <p>
          Why doesn't the quotient principle apply here?  What goes wrong?  You might want to list out all 3-scoop cones and form the equivalence classes of shakes to see the issue.
        </p>
      </statement>
    </task>
  </activity>

  <p>
    The previous activity illustrates that you cannot always simply apply the quotient principle to eliminate order mattering.  What we are after in the 3-scoop shakes with possibly repeated flavors is a <term>multiset</term>, which is just like a set only we allow for elements to be in the set multiple times, but we still do not care in what order the elements are listed.  So an example of an <m>4</m>-element multiset of <m>[7]</m> is <m>\{1,3,3,6\}</m>, which is the same multiset as <m>\{1,6,3,3\}</m> but different from the multiset <m>\{1,3,6\}</m> (in particular, this multiset only has three elements).
  </p>

  <p>
    What we tried to do above was to count multisets by first counting sequences with possibly repeated elements, and then divide out by the number of sequences that just differ by the arrangement of a particular multiset.  But this didn't work, because the size of each block was not the same.
  </p>

  <p>
    However, we would still like to be able to count the number of multisets.  How can we do this?  Is it an application of the quotient principle after all?  To start, let's establish some notation.  The number of <m>k</m>-element subsets of <m>[n]</m> was given by <m>n</m> choose <m>k</m> (written <m>\binom{n}{k}</m>), so we will say that the number of <m>k</m>-element <em>multisets</em> of <m>[n]</m> will be <term><m>n</m> multichoose <m>k</m></term>, and write <m>\mchoose{n}{k}</m>.  From what we have seen above, we can say,
    <me>
      \mchoose{n}{k} \ne \frac{n^k}{k!}
    </me>
    despite the obvious allure of this possibility.
  </p>

  <p>
    Our question now is, what <em>should</em> be in the numerator if not <m>n^k</m>?  First let's get more comfortable with thinking of multisets as a model for counting questions.
  </p>

  <activity>
    <!-- TODO: write a problem about applications of multichoose.  Then write one introducing the other way of thinking about it.  -->
  </activity>

</subsection>


 <!-- <xi:include href="exercises/basic-quotient.ptx"/> -->

</section>
